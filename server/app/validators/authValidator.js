const Joi = require("joi");

// Validate khi ƒëƒÉng k√Ω
const registerSchema = Joi.object({
  email: Joi.string()
    .email({ tlds: { allow: false } })
    .required()
    .messages({
      "string.empty": "Email kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng",
      "string.email": "Email kh√¥ng h·ª£p l·ªá",
      "any.required": "Email l√† b·∫Øt bu·ªôc",
    }),
  password: Joi.string().min(8).required().messages({
    "string.empty": "M·∫≠t kh·∫©u kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng",
    "string.min": "M·∫≠t kh·∫©u t·ªëi thi·ªÉu 8 k√Ω t·ª±",
    "any.required": "M·∫≠t kh·∫©u l√† b·∫Øt bu·ªôc",
  }),
  repassword: Joi.string().valid(Joi.ref("password")).required().messages({
    "string.empty": "Vui l√≤ng nh·∫≠p l·∫°i m·∫≠t kh·∫©u",
    "any.only": "M·∫≠t kh·∫©u nh·∫≠p l·∫°i kh√¥ng kh·ªõp",
    "any.required": "Vui l√≤ng nh·∫≠p l·∫°i m·∫≠t kh·∫©u",
  }),
  firstname: Joi.string().allow(""),
  lastname: Joi.string().allow(""),
});

// Validate khi login
const loginSchema = Joi.object({
  email: Joi.string()
    .trim()
    .email({ tlds: { allow: false } }) // kh√¥ng √©p TLD (cho test local)
    .required()
    .messages({
      "string.empty": "Email kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng",
      "string.email": "Email kh√¥ng h·ª£p l·ªá",
      "any.required": "Email l√† b·∫Øt bu·ªôc",
    }),

  password: Joi.string().trim().min(8).max(50).required().messages({
    "string.empty": "M·∫≠t kh·∫©u kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng",
    "string.min": "M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 8 k√Ω t·ª±",
    "string.max": "M·∫≠t kh·∫©u kh√¥ng ƒë∆∞·ª£c qu√° 50 k√Ω t·ª±",
    "any.required": "M·∫≠t kh·∫©u l√† b·∫Øt bu·ªôc",
  }),
});

// üß© Validate khi x√°c minh t√†i kho·∫£n
const verifySchema = Joi.object({
  email: Joi.string()
    .email({ tlds: { allow: false } })
    .required()
    .messages({
      "string.empty": "Email kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng",
      "string.email": "Email kh√¥ng h·ª£p l·ªá",
      "any.required": "Email l√† b·∫Øt bu·ªôc",
    }),

  code: Joi.string()
    .pattern(/^[0-9]{6}$/)
    .required()
    .messages({
      "string.empty": "M√£ x√°c minh kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng",
      "string.pattern.base": "M√£ x√°c minh ph·∫£i g·ªìm 6 ch·ªØ s·ªë",
      "any.required": "M√£ x√°c minh l√† b·∫Øt bu·ªôc",
    }),
});

const forgotPasswordSchema = Joi.object({
  email: Joi.string().email().required().messages({
    "string.empty": "Email kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng",
    "string.email": "Email kh√¥ng h·ª£p l·ªá",
    "any.required": "Email l√† b·∫Øt bu·ªôc",
  }),
});

const forgotVerifySchema = Joi.object({
  email: Joi.string().email().required().messages({
    "string.empty": "Email kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng",
    "string.email": "Email kh√¥ng h·ª£p l·ªá",
    "any.required": "Email l√† b·∫Øt bu·ªôc",
  }),
  code: Joi.string().required().messages({
    "string.empty": "M√£ x√°c minh kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng",
    "any.required": "M√£ x√°c minh l√† b·∫Øt bu·ªôc",
  }),
});

//validate qu√™n m·∫≠t kh·∫©u
const resetPasswordSchema = Joi.object({
  email: Joi.string().email().required().messages({
    "string.email": "Email kh√¥ng h·ª£p l·ªá",
    "any.required": "Email l√† b·∫Øt bu·ªôc",
  }),
  code: Joi.string().required().messages({
    "any.required": "M√£ ƒë·∫∑t l·∫°i l√† b·∫Øt bu·ªôc",
  }),
});

// Validate ƒë·ªïi m·∫≠t kh·∫©u

const changePasswordSchema = Joi.object({
  oldPassword: Joi.string().required().messages({
    "string.empty": "M·∫≠t kh·∫©u c≈© kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng",
    "any.required": "Vui l√≤ng nh·∫≠p m·∫≠t kh·∫©u c≈©",
  }),

  newPassword: Joi.string().min(8).required().messages({
    "string.empty": "M·∫≠t kh·∫©u m·ªõi kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng",
    "string.min": "M·∫≠t kh·∫©u m·ªõi ph·∫£i c√≥ √≠t nh·∫•t 8 k√Ω t·ª±",
    "any.required": "Vui l√≤ng nh·∫≠p m·∫≠t kh·∫©u m·ªõi",
  }),

  confirmPassword: Joi.string()
    .valid(Joi.ref("newPassword"))
    .required()
    .messages({
      "string.empty": "Vui l√≤ng nh·∫≠p l·∫°i m·∫≠t kh·∫©u x√°c nh·∫≠n",
      "any.only": "M·∫≠t kh·∫©u x√°c nh·∫≠n kh√¥ng kh·ªõp",
      "any.required": "Vui l√≤ng x√°c nh·∫≠n m·∫≠t kh·∫©u",
    }),
});

const changeUserNameSchema = Joi.object({
  firstName: Joi.string()
    .trim()
    .min(2)
    .max(50)
    .pattern(/^[A-Za-z√Ä-·ªπ\s'-]+$/)
    .required()
    .messages({
      "string.empty": "T√™n kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng",
      "string.min": "T√™n ph·∫£i c√≥ √≠t nh·∫•t 2 k√Ω t·ª±",
      "string.max": "T√™n kh√¥ng ƒë∆∞·ª£c v∆∞·ª£t qu√° 50 k√Ω t·ª±",
      "string.pattern.base":
        "T√™n ch·ªâ ƒë∆∞·ª£c ch·ª©a ch·ªØ c√°i, kho·∫£ng tr·∫Øng, d·∫•u - v√† '",
      "any.required": "Thi·∫øu tr∆∞·ªùng firstName",
    }),

  lastName: Joi.string()
    .trim()
    .min(2)
    .max(50)
    .pattern(/^[A-Za-z√Ä-·ªπ\s'-]+$/)
    .required()
    .messages({
      "string.empty": "H·ªç kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng",
      "string.min": "H·ªç ph·∫£i c√≥ √≠t nh·∫•t 2 k√Ω t·ª±",
      "string.max": "H·ªç kh√¥ng ƒë∆∞·ª£c v∆∞·ª£t qu√° 50 k√Ω t·ª±",
      "string.pattern.base":
        "H·ªç ch·ªâ ƒë∆∞·ª£c ch·ª©a ch·ªØ c√°i, kho·∫£ng tr·∫Øng, d·∫•u - v√† '",
      "any.required": "Thi·∫øu tr∆∞·ªùng lastName",
    }),
});
module.exports = {
  registerSchema,
  loginSchema,
  changePasswordSchema,
  verifySchema,
  forgotPasswordSchema,
  resetPasswordSchema,
  forgotVerifySchema,
  changeUserNameSchema,
};
