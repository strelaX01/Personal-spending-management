const Joi = require("joi");

// ============================
// üìä VALIDATE CATEGORY
// ============================

const addCategorySchema = Joi.object({
  name: Joi.string().trim().min(1).max(50).required().messages({
    "string.empty": "T√™n danh m·ª•c l√† b·∫Øt bu·ªôc",
    "string.min": "T√™n danh m·ª•c ph·∫£i c√≥ √≠t nh·∫•t 1 k√Ω t·ª±",
    "string.max": "T√™n danh m·ª•c kh√¥ng ƒë∆∞·ª£c v∆∞·ª£t qu√° 50 k√Ω t·ª±",
    "any.required": "Thi·∫øu t√™n danh m·ª•c chi ti√™u",
  }),
  color: Joi.string()
    .pattern(/^#([0-9A-Fa-f]{3}){1,2}$/)
    .default("#000000")
    .messages({
      "string.pattern.base":
        "M√£ m√†u kh√¥ng h·ª£p l·ªá (ph·∫£i ·ªü d·∫°ng hex nh∆∞ #FF0000)",
    }),
  icon: Joi.string().allow("").max(100).messages({
    "string.max": "T√™n icon kh√¥ng ƒë∆∞·ª£c v∆∞·ª£t qu√° 100 k√Ω t·ª±",
  }),
});

const editCategorySchema = Joi.object({
  category_id: Joi.number().integer().required().messages({
    "any.required": "category_id l√† b·∫Øt bu·ªôc",
    "number.base": "category_id ph·∫£i l√† s·ªë",
  }),
  name: Joi.string().trim().min(1).max(100).required().messages({
    "string.empty": "T√™n danh m·ª•c kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng",
    "any.required": "T√™n danh m·ª•c l√† b·∫Øt bu·ªôc",
  }),
  color: Joi.string()
    .pattern(/^#([0-9A-F]{3}){1,2}$/i)
    .required()
    .messages({
      "string.pattern.base": "M√†u kh√¥ng h·ª£p l·ªá (ph·∫£i l√† m√£ hex, v√≠ d·ª• #FF5733)",
      "any.required": "M√†u l√† b·∫Øt bu·ªôc",
    }),
  icon: Joi.string().trim().min(1).required().messages({
    "string.empty": "Bi·ªÉu t∆∞·ª£ng kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng",
    "any.required": "Bi·ªÉu t∆∞·ª£ng l√† b·∫Øt bu·ªôc",
  }),
});

const deleteCategorySchema = Joi.object({
  category_id: Joi.number().integer().required().messages({
    "any.required": "category_id l√† b·∫Øt bu·ªôc",
    "number.base": "category_id ph·∫£i l√† s·ªë",
  }),
});

// ============================
// üìä VALIDATE PLAN
// ============================

const getPlanSchema = Joi.object({
  month: Joi.number().integer().min(1).max(12).required().messages({
    "number.base": `"month" ph·∫£i l√† s·ªë`,
    "number.min": `"month" ph·∫£i t·ª´ 1 ƒë·∫øn 12`,
    "number.max": `"month" ph·∫£i t·ª´ 1 ƒë·∫øn 12`,
    "any.required": `"month" l√† b·∫Øt bu·ªôc`,
  }),

  year: Joi.number().integer().min(2000).max(2100).required().messages({
    "number.base": `"year" ph·∫£i l√† s·ªë`,
    "number.min": `"year" ph·∫£i >= 2000"`,
    "number.max": `"year" kh√¥ng ƒë∆∞·ª£c v∆∞·ª£t qu√° 2100"`,
    "any.required": `"year" l√† b·∫Øt bu·ªôc"`,
  }),
});

const savePlanSchema = Joi.object({
  month: Joi.number().integer().min(1).max(12).required().messages({
    "any.required": "Th√°ng l√† b·∫Øt bu·ªôc",
    "number.base": "Th√°ng ph·∫£i l√† s·ªë",
  }),
  year: Joi.number().integer().min(2000).required().messages({
    "any.required": "NƒÉm l√† b·∫Øt bu·ªôc",
    "number.base": "NƒÉm ph·∫£i l√† s·ªë",
  }),
  items: Joi.array()
    .items(
      Joi.object({
        category_id: Joi.number().integer().required().messages({
          "any.required": "category_id l√† b·∫Øt bu·ªôc",
          "number.base": "category_id ph·∫£i l√† s·ªë",
        }),
        amount: Joi.number().required().messages({
          "any.required": "amount l√† b·∫Øt bu·ªôc",
          "number.base": "amount ph·∫£i l√† s·ªë",
        }),
      })
    )
    .min(1)
    .required()
    .messages({
      "array.base": "items ph·∫£i l√† m·ªôt m·∫£ng",
      "array.min": "Ph·∫£i c√≥ √≠t nh·∫•t m·ªôt m·ª•c trong danh s√°ch items",
    }),
});

// ============================
// üìä VALIDATE FINANCE
// ============================

const addFinanceSchema = Joi.object({
  categoryId: Joi.number().integer().required().messages({
    "any.required": "danh m·ª•c l√† b·∫Øt bu·ªôc",
    "number.base": "danh m·ª•c ph·∫£i l√† s·ªë nguy√™n",
  }),

  amount: Joi.number().positive().required().messages({
    "any.required": "s·ªë ti·ªÅn l√† b·∫Øt bu·ªôc",
    "number.base": "s·ªë ti·ªÅn ph·∫£i l√† s·ªë",
    "number.positive": "s·ªë ti·ªÅn ph·∫£i l·ªõn h∆°n 0",
  }),

  date: Joi.date().iso().required().messages({
    "any.required": "ng√†y l√† b·∫Øt bu·ªôc",
    "date.base": "ng√†y ph·∫£i l√† ki·ªÉu ng√†y h·ª£p l·ªá",
    "date.format": "ng√†y ph·∫£i ·ªü ƒë·ªãnh d·∫°ng ISO (YYYY-MM-DD ho·∫∑c ISO string)",
  }),

  description: Joi.string().allow(null, "").max(255).messages({
    "string.max": "m√¥ t·∫£ kh√¥ng ƒë∆∞·ª£c v∆∞·ª£t qu√° 255 k√Ω t·ª±",
  }),
});

const editFinanceSchema = Joi.object({
  id: Joi.number().integer().positive().required().messages({
    "number.base": "ID ph·∫£i l√† s·ªë",
    "number.integer": "ID ph·∫£i l√† s·ªë nguy√™n",
    "number.positive": "ID ph·∫£i l·ªõn h∆°n 0",
    "any.required": "Thi·∫øu ID t√†i ch√≠nh c·∫ßn ch·ªânh s·ª≠a",
  }),
  categoryId: Joi.number().integer().positive().required().messages({
    "number.base": "Category ID ph·∫£i l√† s·ªë",
    "any.required": "Thi·∫øu danh m·ª•c t√†i ch√≠nh",
  }),
  amount: Joi.number().min(0).required().messages({
    "number.base": "S·ªë ti·ªÅn ph·∫£i l√† s·ªë",
    "number.min": "S·ªë ti·ªÅn kh√¥ng ƒë∆∞·ª£c √¢m",
    "any.required": "Thi·∫øu s·ªë ti·ªÅn t√†i ch√≠nh",
  }),
  date: Joi.date().required().messages({
    "date.base": "Ng√†y kh√¥ng h·ª£p l·ªá",
    "any.required": "Thi·∫øu ng√†y t√†i ch√≠nh",
  }),
  description: Joi.string().allow("").max(255).messages({
    "string.base": "M√¥ t·∫£ ph·∫£i l√† chu·ªói",
    "string.max": "M√¥ t·∫£ kh√¥ng ƒë∆∞·ª£c v∆∞·ª£t qu√° 255 k√Ω t·ª±",
  }),
});

const deleteFinanceSchema = Joi.object({
  id: Joi.number().integer().positive().required().messages({
    "number.base": "ID ph·∫£i l√† s·ªë",
    "number.integer": "ID ph·∫£i l√† s·ªë nguy√™n",
    "number.positive": "ID ph·∫£i l·ªõn h∆°n 0",
    "any.required": "Thi·∫øu ID t√†i ch√≠nh c·∫ßn x√≥a",
  }),
});

const monthYearSchema = Joi.object({
  month: Joi.number().integer().min(1).max(12).required().messages({
    "any.required": "month l√† b·∫Øt bu·ªôc",
    "number.base": "month ph·∫£i l√† s·ªë",
    "number.min": "month kh√¥ng h·ª£p l·ªá",
    "number.max": "month kh√¥ng h·ª£p l·ªá",
  }),
  year: Joi.number().integer().min(2000).max(2100).required().messages({
    "any.required": "year l√† b·∫Øt bu·ªôc",
    "number.base": "year ph·∫£i l√† s·ªë",
    "number.min": "year kh√¥ng h·ª£p l·ªá",
    "number.max": "year kh√¥ng h·ª£p l·ªá",
  }),
});

const getAnnualPlanSchema = Joi.object({
  year: Joi.number().integer().min(2000).max(2100).required(),
});

const getTotalAmountSchema = Joi.object({
  userId: Joi.number().integer().positive().required(),
});

module.exports = {
  monthYearSchema,
  addCategorySchema,
  editCategorySchema,
  deleteCategorySchema,
  addFinanceSchema,
  editFinanceSchema,
  deleteFinanceSchema,
  getTotalAmountSchema,
  getPlanSchema,
  savePlanSchema,
  getAnnualPlanSchema
};
