const bcrypt = require("bcrypt");
const UserModel = require("../models/UserModel");
const Mailer = require("../services/Mailer");
const TokenService = require("../services/TokenService");
const {
  registerSchema,
  loginSchema,
  changePasswordSchema,
  forgotPasswordSchema,
  resetPasswordSchema,
  verifySchema,
  forgotVerifySchema,
  changeUserNameSchema,
} = require("../validators/authValidator");
const {
  generateVerificationCode,
  validatePassword,
  generateRandomPassword,
} = require("../utils/helpers");

class AuthController {
  constructor() {
    this.codes = new Map(); // L∆∞u email -> code t·∫°m
  }

  setTempCode(email, code, ttl = 15 * 60 * 1000) {
    this.codes.set(email, code);
    setTimeout(() => this.codes.delete(email), ttl);
  }

  // üß© ƒêƒÉng k√Ω
  async register(req, res, next) {
    try {
      const { error } = registerSchema.validate(req.body, {
        abortEarly: false,
      });
      if (error)
        return next({
          status: 400,
          message: "D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá",
          details: error.details.map((e) => e.message),
        });

      const { email, password } = req.body;

      const existing = await UserModel.findByEmail(email);
      if (existing) return next({ status: 400, message: "Email ƒë√£ t·ªìn t·∫°i" });

      const firstParts = ["Alex", "Taylor", "Jamie", "Sam", "Chris", "Robin"];
      const lastParts = ["Nguyen", "Tran", "Le", "Pham", "Hoang", "Do"];

      const firstname =
        firstParts[Math.floor(Math.random() * firstParts.length)];
      const lastname = lastParts[Math.floor(Math.random() * lastParts.length)];

      const hashed = await bcrypt.hash(password, 10);
      await UserModel.create({ firstname, lastname, email, password: hashed });

      const code = generateVerificationCode();
      this.setTempCode(email, code);

      await Mailer.sendMail({
        to: email,
        subject: "M√£ x√°c minh t√†i kho·∫£n",
        text: `M√£ x√°c minh c·ªßa b·∫°n l√†: ${code}`,
      });

      res.json({
        success: true,
        message:
          "ƒêƒÉng k√Ω th√†nh c√¥ng. Vui l√≤ng ki·ªÉm tra email ƒë·ªÉ x√°c minh t√†i kho·∫£n.",
      });
    } catch (err) {
      next(err);
    }
  }

  // üß© X√°c minh t√†i kho·∫£n
  async verify(req, res, next) {
    try {
      const { error } = verifySchema.validate(req.body, { abortEarly: false });
      if (error)
        return next({
          status: 400,
          message: "D·ªØ li·ªáu x√°c minh kh√¥ng h·ª£p l·ªá",
          details: error.details.map((e) => e.message),
        });

      const { email, code } = req.body;
      const saved = this.codes.get(email);

      if (!saved)
        return next({
          status: 400,
          message: "M√£ ƒë√£ h·∫øt h·∫°n ho·∫∑c ch∆∞a ƒë∆∞·ª£c g·ª≠i",
        });

      if (String(code) !== String(saved))
        return next({ status: 401, message: "M√£ x√°c minh kh√¥ng h·ª£p l·ªá" });

      await UserModel.verify(email);
      this.codes.delete(email);

      res.json({ success: true, message: "X√°c minh t√†i kho·∫£n th√†nh c√¥ng" });
    } catch (err) {
      next(err);
    }
  }

  // üß© G·ª≠i l·∫°i m√£ x√°c minh
  async resend(req, res, next) {
    try {
      const { email } = req.body;
      console.log("email", email);
      const user = await UserModel.findByEmail(email);

      if (!user)
        return next({
          status: 404,
          message: "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng v·ªõi email n√†y",
        });

      const code = generateVerificationCode();
      this.setTempCode(email, code);

      await Mailer.sendMail({
        to: email,
        subject: "M√£ x√°c minh (g·ª≠i l·∫°i)",
        text: `M√£ x√°c minh m·ªõi c·ªßa b·∫°n l√†: ${code}`,
      });

      res.json({ success: true, message: "M√£ x√°c minh ƒë√£ ƒë∆∞·ª£c g·ª≠i l·∫°i" });
    } catch (err) {
      next(err);
    }
  }

  // üß© ƒêƒÉng nh·∫≠p
  async login(req, res, next) {
    try {
      const { error } = loginSchema.validate(req.body, { abortEarly: false });
      if (error)
        return next({
          status: 400,
          message: "D·ªØ li·ªáu ƒëƒÉng nh·∫≠p kh√¥ng h·ª£p l·ªá",
          details: error.details.map((e) => e.message),
        });

      const { email, password } = req.body;
      const user = await UserModel.findByEmail(email);

      if (!user)
        return next({ status: 401, message: "Email ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ƒë√∫ng" });

      const passwordValid = await bcrypt.compare(password, user.password);
      if (!passwordValid)
        return next({ status: 401, message: "Email ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ƒë√∫ng" });

      if (!user.verification) {
        const code = generateVerificationCode();
        this.setTempCode(email, code);

        await Mailer.sendMail({
          to: email,
          subject: "X√°c minh t√†i kho·∫£n",
          text: `M√£ x√°c minh c·ªßa b·∫°n l√†: ${code}`,
        });

        return next({
          status: 403,
          message:
            "T√†i kho·∫£n ch∆∞a ƒë∆∞·ª£c x√°c minh. M√£ m·ªõi ƒë√£ ƒë∆∞·ª£c g·ª≠i qua email.",
        });
      }

      const token = TokenService.generateToken({ userId: user.user_id });

      res.status(200).json({
        success: true,
        message: "ƒêƒÉng nh·∫≠p th√†nh c√¥ng",
        token,
        user: {
          firstname: user.firstname,
          lastname: user.lastname,
          email: user.email,
        },
      });
    } catch (err) {
      next(err);
    }
  }

  // üß© Qu√™n m·∫≠t kh·∫©u
  async forgot(req, res, next) {
    console.log("sdsd");
    try {
      const { error } = forgotPasswordSchema.validate(req.body, {
        abortEarly: false,
      });
      if (error)
        return next({
          status: 400,
          message: "D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá",
          details: error.details.map((e) => e.message),
        });

      const { email } = req.body;
      const user = await UserModel.findByEmail(email);

      if (!user)
        return next({
          status: 404,
          message: "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng v·ªõi email n√†y",
        });

      const code = generateVerificationCode();
      this.setTempCode(email, code);

      await Mailer.sendMail({
        to: email,
        subject: "M√£ ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u",
        text: `M√£ ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u c·ªßa b·∫°n l√†: ${code}`,
      });

      res.json({
        success: true,
        message: "M√£ ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u ƒë√£ ƒë∆∞·ª£c g·ª≠i qua email",
      });
    } catch (err) {
      next(err);
    }
  }

  async forgotVerify(req, res, next) {
    console.log("da goi toi day");
    try {
      const { error } = forgotVerifySchema.validate(req.body, {
        abortEarly: false,
      });
      if (error)
        return next({
          status: 400,
          message: "D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá",
          details: error.details.map((e) => e.message),
        });

      const { email, code } = req.body;
      const savedCode = this.codes.get(email);

      if (!savedCode)
        return next({
          status: 404,
          message: "M√£ x√°c minh ƒë√£ h·∫øt h·∫°n ho·∫∑c ch∆∞a ƒë∆∞·ª£c y√™u c·∫ßu",
        });

      if (String(code) !== String(savedCode))
        return next({
          status: 401,
          message: "M√£ x√°c minh kh√¥ng h·ª£p l·ªá",
        });

      // ‚úÖ X√≥a m√£ sau khi x√°c minh
      this.codes.delete(email);

      // ‚úÖ Sinh m·∫≠t kh·∫©u ng·∫´u nhi√™n
      const newPassword = Math.random().toString(36).slice(-10);
      const hashedPassword = await bcrypt.hash(newPassword, 10);

      // ‚úÖ C·∫≠p nh·∫≠t v√†o DB
      await UserModel.updatePassword(email, hashedPassword);

      // ‚úÖ G·ª≠i mail m·∫≠t kh·∫©u m·ªõi
      await Mailer.sendMail({
        to: email,
        subject: "M·∫≠t kh·∫©u m·ªõi c·ªßa b·∫°n",
        text: `M·∫≠t kh·∫©u m·ªõi c·ªßa b·∫°n l√†: ${newPassword}`,
      });

      res.json({
        success: true,
        message: "M·∫≠t kh·∫©u m·ªõi ƒë√£ ƒë∆∞·ª£c t·∫°o v√† g·ª≠i qua email th√†nh c√¥ng.",
      });
    } catch (err) {
      next(err);
    }
  }

  // üß© ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u
  async reset(req, res, next) {
    try {
      const { error } = resetPasswordSchema.validate(req.body, {
        abortEarly: false,
      });
      if (error)
        return next({
          status: 400,
          message: "D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá",
          details: error.details.map((e) => e.message),
        });

      const { email, code, newPassword } = req.body;
      const saved = this.codes.get(email);

      if (!saved || String(code) !== String(saved))
        return next({
          status: 400,
          message: "M√£ kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n",
        });

      const hashed = await bcrypt.hash(newPassword, 10);
      await UserModel.updatePasswordByEmail(email, hashed);

      this.codes.delete(email);

      res.json({ success: true, message: "ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u th√†nh c√¥ng" });
    } catch (err) {
      next(err);
    }
  }

  // üß© ƒê·ªïi m·∫≠t kh·∫©u
  async changePassword(req, res, next) {
    try {
      const { error } = changePasswordSchema.validate(req.body, {
        abortEarly: false,
      });

      if (error) {
        return next({
          status: 400,
          message: "D·ªØ li·ªáu ƒë·ªïi m·∫≠t kh·∫©u kh√¥ng h·ª£p l·ªá",
          details: error.details.map((e) => e.message),
        });
      }

      const userId = req.userId;
      const { oldPassword, newPassword, confirmPassword } = req.body;

      if (!userId) {
        return next({ status: 401, message: "Kh√¥ng x√°c ƒë·ªãnh ƒë∆∞·ª£c ng∆∞·ªùi d√πng" });
      }


      if (newPassword !== confirmPassword) {
        return next({
          status: 400,
          message: "M·∫≠t kh·∫©u m·ªõi v√† x√°c nh·∫≠n m·∫≠t kh·∫©u kh√¥ng kh·ªõp",
        });
      }

      const user = await UserModel.findById(userId);
      if (!user) {
        return next({ status: 404, message: "Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i" });
      }

      const isMatch = await bcrypt.compare(oldPassword, user.password);
      if (!isMatch) {
        return next({ status: 401, message: "M·∫≠t kh·∫©u c≈© kh√¥ng ƒë√∫ng" });
      }

      const hashedPassword = await bcrypt.hash(newPassword, 10);
      const updated = await UserModel.updatePasswordById(
        userId,
        hashedPassword
      );

      if (!updated) {
        return next({ status: 500, message: "Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t m·∫≠t kh·∫©u" });
      }

      return res.json({
        success: true,
        message: "ƒê·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng",
      });
    } catch (err) {
      console.error("‚ùå L·ªói changePassword:", err);
      next(err);
    }
  }

async changeUserName(req, res) {
  try {

    const userId = req.userId;

    const { error, value } = changeUserNameSchema.validate(req.body, {
      abortEarly: false,
    });

    if (error) {
      console.warn("‚ö†Ô∏è L·ªói validate d·ªØ li·ªáu:", error.details);
      return res.status(400).json({
        message: "D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá",
        details: error.details.map((d) => d.message),
      });
    }

    const { firstName, lastName } = value;
    console.log("‚úÖ D·ªØ li·ªáu h·ª£p l·ªá:", { firstName, lastName });

    const updatedUser = await UserModel.changeUserName(userId, firstName, lastName);

    if (!updatedUser) {
      console.warn("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y user ho·∫∑c kh√¥ng c√≥ thay ƒë·ªïi:", userId);
      return res.status(404).json({
        message: "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng ho·∫∑c kh√¥ng c√≥ thay ƒë·ªïi",
      });
    }

    console.log("‚úÖ C·∫≠p nh·∫≠t th√†nh c√¥ng:", updatedUser);

    return res.status(200).json({
      message: "C·∫≠p nh·∫≠t t√™n ng∆∞·ªùi d√πng th√†nh c√¥ng",
      user: updatedUser,
    });
  } catch (error) {
    console.error("‚ùå L·ªói changeUserName:", error);
    return res.status(500).json({ message: "L·ªói server", error: error.message });
  }
}

}

module.exports = new AuthController();
