const IncomeCategoryModel = require("../models/IncomeCategoryModel");
const ExpenseCategoryModel = require("../models/ExpenseCategoryModel");
const IncomeModel = require("../models/IncomeModel");
const ExpenseModel = require("../models/ExpenseModel");
const PlanModel = require("../models/PlanModel");
const TotalModel = require("../models/TotalModel");
const {
  monthYearSchema,
  addCategorySchema,
  editCategorySchema,
  deleteCategorySchema,
  addFinanceSchema,
  editFinanceSchema,
  deleteFinanceSchema,
  getTotalAmountSchema,
  getPlanSchema,
  savePlanSchema,
  getAnnualPlanSchema,
} = require("../validators/financeValidator");
const { date } = require("joi");

class FinanceController {
  // ============================
  // üßæ INCOME CATEGORY CRUD
  // ============================
  async addIncomeCategory(req, res, next) {
    try {
      const userId = req.userId;

      const { error, value } = addCategorySchema.validate(req.body, {
        abortEarly: false,
        convert: true,
      });

      if (error) {
        return next({
          status: 400,
          message: "D·ªØ li·ªáu danh m·ª•c chi ti√™u kh√¥ng h·ª£p l·ªá",
          details: error.details.map((e) => e.message),
        });
      }
      const { name, color, icon } = value;

      await IncomeCategoryModel.add({ userId, name, color, icon });
      res.json({ success: true, message: "Th√™m danh m·ª•c thu nh·∫≠p th√†nh c√¥ng" });
    } catch (err) {
      next(err);
    }
  }

  async editIncomeCategory(req, res, next) {
    try {
      const { error } = editCategorySchema.validate(req.body, {
        abortEarly: false,
      });
      if (error) {
        return next({
          status: 400,
          message: "D·ªØ li·ªáu c·∫≠p nh·∫≠t danh m·ª•c kh√¥ng h·ª£p l·ªá",
          details: error.details.map((e) => e.message),
        });
      }
      const userId = req.userId;
      const { category_id, name, color, icon } = req.body;

      const result = await IncomeCategoryModel.update({
        userId,
        category_id,
        name,
        color,
        icon,
      });

      res.json({
        success: true,
        message: "C·∫≠p nh·∫≠t danh m·ª•c thu nh·∫≠p th√†nh c√¥ng",
      });
    } catch (err) {
      next(err);
    }
  }

  async deleteIncomeCategory(req, res, next) {
    try {
      const { error } = deleteCategorySchema.validate(req.body, {
        abortEarly: false,
      });
      if (error) {
        return next({
          status: 400,
          message: "D·ªØ li·ªáu c·∫≠p nh·∫≠t danh m·ª•c kh√¥ng h·ª£p l·ªá",
          details: error.details.map((e) => e.message),
        });
      }

      const userId = req.userId;
      const { category_id } = req.body;

      await IncomeCategoryModel.delete({ userId, category_id });
      res.json({ success: true, message: "X√≥a danh m·ª•c thu nh·∫≠p th√†nh c√¥ng" });
    } catch (err) {
      next(err);
    }
  }

  async getIncomeCategories(req, res, next) {
    try {
      const userId = req.userId;
      const rows = await IncomeCategoryModel.getAll({ userId });
      res.json({ success: true, data: rows });
    } catch (err) {
      next(err);
    }
  }

  // ============================
  // üí∏ EXPENSE CATEGORY CRUD
  // ============================
  async addExpenseCategory(req, res, next) {
    try {
      const userId = req.userId;

      const { error, value } = addCategorySchema.validate(req.body, {
        abortEarly: false,
        convert: true,
      });

      if (error) {
        return next({
          status: 400,
          message: "D·ªØ li·ªáu danh m·ª•c chi ti√™u kh√¥ng h·ª£p l·ªá",
          details: error.details.map((e) => e.message),
        });
      }
      const { name, color, icon } = value;

      await ExpenseCategoryModel.add({ userId, name, color, icon });
      res.json({ success: true, message: "Th√™m danh m·ª•c chi ti√™u th√†nh c√¥ng" });
    } catch (err) {
      next(err);
    }
  }

  async editExpenseCategory(req, res, next) {
    try {
      const userId = req.userId;
      const { error, value } = editCategorySchema.validate(req.body, {
        abortEarly: false,
      });
      if (error) {
        return next({
          status: 400,
          message: "D·ªØ li·ªáu c·∫≠p nh·∫≠t danh m·ª•c kh√¥ng h·ª£p l·ªá",
          details: error.details.map((e) => e.message),
        });
      }
      const { category_id, name, color, icon } = value;

      const result = await ExpenseCategoryModel.update({
        userId,
        category_id,
        name,
        color,
        icon,
      });

      res.json({
        success: true,
        message: "C·∫≠p nh·∫≠t danh m·ª•c thu nh·∫≠p th√†nh c√¥ng",
      });
    } catch (err) {
      next(err);
    }
  }

  async deleteExpenseCategory(req, res, next) {
    try {
      const userId = req.userId;

      const { error, value } = deleteCategorySchema.validate(req.body, {
        abortEarly: false,
        convert: true,
      });
      if (error) {
        return next({
          status: 400,
          message: "D·ªØ li·ªáu c·∫≠p nh·∫≠t danh m·ª•c kh√¥ng h·ª£p l·ªá",
          details: error.details.map((e) => e.message),
        });
      }

      const { category_id } = value;

      await ExpenseCategoryModel.delete({ userId, category_id });
      res.json({ success: true, message: "X√≥a danh m·ª•c chi ti√™u th√†nh c√¥ng" });
    } catch (err) {
      next(err);
    }
  }

  async getExpenseCategories(req, res, next) {
    try {
      const userId = req.userId;
      const rows = await ExpenseCategoryModel.getAll({ userId });
      res.json({ success: true, data: rows });
    } catch (err) {
      next(err);
    }
  }

  // ============================
  // üí∞ INCOME CRUD
  // ============================
  async addIncome(req, res, next) {
    try {
      const userId = req.userId;

      // Validate d·ªØ li·ªáu
      const { error, value } = addFinanceSchema.validate(req.body, {
        abortEarly: false,
        convert: true,
      });

      if (error) {
        return next({
          status: 400,
          message: "D·ªØ li·ªáu th√™m thu nh·∫≠p kh√¥ng h·ª£p l·ªá",
          details: error.details.map((e) => e.message),
        });
      }

      const { categoryId, amount, date, description } = value;

      const result = await IncomeModel.add({
        userId,
        categoryId,
        amount,
        date,
        description,
      });

      if (result.requireConfirmation) {
        return res.status(200).json({
          success: false,
          requireConfirmation: true,
          message: result.message,
        });
      }

      res.status(201).json({
        success: true,
        message: "Thu nh·∫≠p ƒë√£ ƒë∆∞·ª£c l∆∞u th√†nh c√¥ng",
        insertId: result.insertId,
      });
    } catch (err) {
      next(err);
    }
  }

  async confirmIncome(req, res, next) {
    try {
      const userId = req.userId;
      const { categoryId, amount, date, description } = req.body;

      // G·ªçi model ƒë·ªÉ th√™m chi ti√™u m√† kh√¥ng c·∫ßn ki·ªÉm tra h·∫°n m·ª©c
      const result = await IncomeModel.addConfirmed({
        userId,
        categoryId,
        amount,
        date,
        description,
      });

      res.status(201).json({
        success: true,
        message: "Thu nh·∫≠p ƒë√£ ƒë∆∞·ª£c th√™m th√†nh c√¥ng sau khi x√°c nh·∫≠n!",
        insertId: result.insertId,
      });
    } catch (err) {
      console.error("üî• Error in confirmIncome:", err);
      next(err);
    }
  }

async editIncome(req, res, next) {
  try {
    const userId = req.userId;

    const { error, value } = editFinanceSchema.validate(req.body, {
      abortEarly: false,
      convert: true,
    });

    if (error) {
      return next({
        status: 400,
        message: "D·ªØ li·ªáu c·∫≠p nh·∫≠t thu nh·∫≠p kh√¥ng h·ª£p l·ªá",
        details: error.details.map((e) => e.message),
      });
    }

    const { id, categoryId, amount, date, description } = value;

    const result = await IncomeModel.update({
      id,
      userId,
      categoryId,
      amount,
      date,
      description,
    });

    if (result.requireConfirmation) {
      return res.status(200).json({
        success: false,
        requireConfirmation: true,
        message: result.message,
      });
    }

    res.status(200).json({
      success: true,
      message: "C·∫≠p nh·∫≠t thu nh·∫≠p th√†nh c√¥ng",
      affectedRows: result.affectedRows,
    });
  } catch (err) {
    console.error("üî• Error in editIncome:", err);
    next(err);
  }
}


  async confirmEditIncome(req, res, next) {
     try {
      console.log("üü¢ confirmEditExpense called");

      const userId = req.userId;
      const expenseId = req.params.id;
      const { category_id, amount, date, description } = req.body;

      const result = await IncomeModel.updateConfirmed({
        id: expenseId,
        userId,
        categoryId: category_id,
        amount,
        date,
        description,
      });

      if (result.affectedRows === 0) {
        return res.status(404).json({
          success: false,
          message: "Kh√¥ng t√¨m th·∫•y thu nh·∫≠p ho·∫∑c b·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠a.",
        });
      }

      res.status(200).json({
        success: true,
        message: "Thu nh·∫≠p ƒë√£ ƒë∆∞·ª£c s·ª≠a th√†nh c√¥ng sau khi x√°c nh·∫≠n!",
      });
    } catch (err) {
      console.error("üî• Error in confirmEditExpense:", err);
      next(err);
    }
  }

  async deleteIncome(req, res, next) {
    try {
      const userId = req.userId;

      const { error, value } = deleteFinanceSchema.validate(req.params, {
        abortEarly: false,
        convert: true,
      });

      if (error) {
        return next({
          status: 400,
          message: "D·ªØ li·ªáu x√≥a chi ti√™u kh√¥ng h·ª£p l·ªá",
          details: error.details.map((e) => e.message),
        });
      }

      const { id } = value;

      await IncomeModel.delete({ id, userId });
      res.json({ success: true, message: "X√≥a thu nh·∫≠p th√†nh c√¥ng" });
    } catch (err) {
      next(err);
    }
  }

  async getIncomesByMonth(req, res, next) {
    try {
      const userId = req.userId;

      // --- Validate query params ---
      const { error, value } = monthYearSchema.validate(req.query, {
        abortEarly: false,
      });
      if (error) {
        return res.status(400).json({
          success: false,
          message: "D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá",
          details: error.details.map((e) => e.message),
        });
      }

      const { month, year } = value;

      // --- L·∫•y d·ªØ li·ªáu t·ª´ model ---
      let rows = await IncomeModel.getByMonth({ userId, month, year });

      // --- N·∫øu tr·∫£ v·ªÅ null ho·∫∑c object, √©p th√†nh array ---
      if (!Array.isArray(rows)) {
        rows = rows ? [rows] : [];
      }

      // --- Tr·∫£ v·ªÅ JSON ---
      return res.json({
        success: true,
        data: rows,
      });
    } catch (err) {
      console.error("‚ùå Error in getIncomesByMonth:", err);
      next(err);
    }
  }

  // ============================
  // üìâ EXPENSE CRUD
  // ============================
  async addExpense(req, res, next) {
    try {
      const userId = req.userId;

      // Validate d·ªØ li·ªáu
      const { error, value } = addFinanceSchema.validate(req.body, {
        abortEarly: false,
        convert: true,
      });

      if (error) {
        return next({
          status: 400,
          message: "D·ªØ li·ªáu th√™m chi ti√™u kh√¥ng h·ª£p l·ªá",
          details: error.details.map((e) => e.message),
        });
      }

      // L·∫•y d·ªØ li·ªáu t·ª´ value ch·ª© kh√¥ng ph·∫£i req.value
      const { categoryId, amount, date, description } = value;

      const result = await ExpenseModel.add({
        userId,
        categoryId,
        amount,
        date,
        description,
      });

      if (result.requireConfirmation) {
        // tr·∫£ v·ªÅ cho frontend hi·ªán modal
        return res.status(200).json({
          success: false,
          requireConfirmation: true,
          message: result.message,
        });
      }

      res.status(201).json({
        success: true,
        message: "Chi ti√™u ƒë√£ ƒë∆∞·ª£c l∆∞u th√†nh c√¥ng",
        insertId: result.insertId,
      });
    } catch (err) {
      next(err);
    }
  }

  async confirmExpense(req, res, next) {
    try {
      const userId = req.userId;
      const { categoryId, amount, date, description } = req.body;

      // G·ªçi model ƒë·ªÉ th√™m chi ti√™u m√† kh√¥ng c·∫ßn ki·ªÉm tra h·∫°n m·ª©c
      const result = await ExpenseModel.addConfirmed({
        userId,
        categoryId,
        amount,
        date,
        description,
      });

      res.status(201).json({
        success: true,
        message: "Chi ti√™u ƒë√£ ƒë∆∞·ª£c th√™m th√†nh c√¥ng sau khi x√°c nh·∫≠n!",
        insertId: result.insertId,
      });
    } catch (err) {
      console.error("üî• Error in confirmExpense:", err);
      next(err);
    }
  }

  async editExpense(req, res, next) {
    try {
      const userId = req.userId;

      const { error, value } = editFinanceSchema.validate(req.body, {
        abortEarly: false,
        convert: true,
      });

      if (error) {
        return next({
          status: 400,
          message: "D·ªØ li·ªáu c·∫≠p nh·∫≠t chi ti√™u kh√¥ng h·ª£p l·ªá",
          details: error.details.map((e) => e.message),
        });
      }

      const { id, categoryId, amount, date, description } = value;

      // üîπ G·ªçi model edit ƒë·ªÉ ki·ªÉm tra h·∫°n m·ª©c + k·∫ø ho·∫°ch
      const result = await ExpenseModel.update({
        id,
        userId,
        categoryId,
        amount,
        date,
        description,
      });

      // üîπ N·∫øu c·∫ßn x√°c nh·∫≠n v∆∞·ª£t h·∫°n m·ª©c
      if (result.requireConfirmation) {
        return res.status(200).json({
          success: false,
          requireConfirmation: true,
          message: result.message,
        });
      }

      // üîπ N·∫øu edit b√¨nh th∆∞·ªùng
      res.status(201).json({
        success: true,
        message: "C·∫≠p nh·∫≠t chi ti√™u th√†nh c√¥ng",
        affectedRows: result.affectedRows,
      });
    } catch (err) {
      next(err);
    }
  }

  async confirmEditExpense(req, res, next) {
    try {
      console.log("üü¢ confirmEditExpense called");

      const userId = req.userId;
      const expenseId = req.params.id;
      const { category_id, amount, date, description } = req.body;

      const result = await ExpenseModel.updateConfirmed({
        id: expenseId,
        userId,
        categoryId: category_id,
        amount,
        date,
        description,
      });

      if (result.affectedRows === 0) {
        return res.status(404).json({
          success: false,
          message: "Kh√¥ng t√¨m th·∫•y chi ti√™u ho·∫∑c b·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠a.",
        });
      }

      res.status(200).json({
        success: true,
        message: "Chi ti√™u ƒë√£ ƒë∆∞·ª£c s·ª≠a th√†nh c√¥ng sau khi x√°c nh·∫≠n!",
      });
    } catch (err) {
      console.error("üî• Error in confirmEditExpense:", err);
      next(err);
    }
  }

  async deleteExpense(req, res, next) {
    try {
      const userId = req.userId;

      const { error, value } = deleteFinanceSchema.validate(req.params, {
        abortEarly: false,
        convert: true,
      });

      if (error) {
        return next({
          status: 400,
          message: "D·ªØ li·ªáu x√≥a chi ti√™u kh√¥ng h·ª£p l·ªá",
          details: error.details.map((e) => e.message),
        });
      }

      const { id } = value;

      await ExpenseModel.delete({ id, userId });
      res.json({ success: true, message: "X√≥a chi ti√™u th√†nh c√¥ng" });
    } catch (err) {
      next(err);
    }
  }

  async getExpensesByMonth(req, res, next) {
    try {
      const userId = req.userId;

      const { error, value } = monthYearSchema.validate(req.query, {
        abortEarly: false,
      });
      if (error) {
        return next({
          status: 400,
          message: "D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá",
          details: error.details.map((e) => e.message),
        });
      }

      const { month, year } = value;

      const rows = await ExpenseModel.getByMonth({ userId, month, year });
      return res.json({ success: true, data: rows });
    } catch (err) {
      next(err);
    }
  }

  // ============================
  // üìä PLANS
  // ============================
  async saveIncomePlan(req, res, next) {
    try {
      const userId = req.userId;

      const { error, value } = savePlanSchema.validate(req.body, {
        abortEarly: false,
        convert: true,
      });

      if (error) {
        return next({
          status: 400,
          message: "D·ªØ li·ªáu truy v·∫•n kh√¥ng h·ª£p l·ªá",
          details: error.details.map((e) => e.message),
        });
      }

      const { month, year, items } = value;

      const result = await PlanModel.saveIncomePlan({
        userId,
        month,
        year,
        items,
      });
      res.json(result);
    } catch (err) {
      next(err);
    }
  }

  async saveExpensePlan(req, res, next) {
    try {
      const userId = req.userId;

      const { error, value } = savePlanSchema.validate(req.body, {
        abortEarly: false,
        convert: true,
      });

      if (error) {
        return next({
          status: 400,
          message: "D·ªØ li·ªáu truy v·∫•n kh√¥ng h·ª£p l·ªá",
          details: error.details.map((e) => e.message),
        });
      }

      const { month, year, items } = value;

      const result = await PlanModel.saveExpensePlan({
        userId,
        month,
        year,
        items,
      });

      res.json(result);
    } catch (err) {
      console.error("üî• [saveExpensePlan] L·ªói server:", err);
      next(err);
    }
  }

  async getIncomePlan(req, res, next) {
    try {
      const userId = req.userId;

      const { error, value } = getPlanSchema.validate(req.query, {
        abortEarly: false,
        convert: true,
      });

      if (error) {
        return next({
          status: 400,
          message: "D·ªØ li·ªáu truy v·∫•n kh√¥ng h·ª£p l·ªá",
          details: error.details.map((e) => e.message),
        });
      }

      const { month, year } = value;

      const rows = await PlanModel.getIncomePlan({ userId, month, year });
      res.json({ success: true, data: rows });
    } catch (err) {
      next(err);
    }
  }


   async getAnnualIncomePlan(req, res, next) {
    try {
      const userId = req.userId;

      const { error, value } = getAnnualPlanSchema.validate(req.query, {
        abortEarly: false,
        convert: true,
      });

      if (error) {
        return next({
          status: 400,
          message: "D·ªØ li·ªáu truy v·∫•n kh√¥ng h·ª£p l·ªá",
          details: error.details.map((e) => e.message),
        });
      }

      const { year } = value;
      const rows = await PlanModel.getAnnualIncomePlan({ userId, year });

      res.json({ success: true, data: rows });
    } catch (err) {
      next(err);
    }
  }

  async getExpensePlan(req, res, next) {
    try {
      const userId = req.userId;

      const { error, value } = getPlanSchema.validate(req.query, {
        abortEarly: false,
        convert: true, // ‚úÖ chuy·ªÉn "10" -> 10 n·∫øu l√† string
      });

      if (error) {
        return next({
          status: 400,
          message: "D·ªØ li·ªáu truy v·∫•n kh√¥ng h·ª£p l·ªá",
          details: error.details.map((e) => e.message),
        });
      }

      const { month, year } = value;
      const rows = await PlanModel.getExpensePlan({ userId, month, year });
      res.json({ success: true, data: rows });
    } catch (err) {
      next(err);
    }
  }

  async getAnnualExpensePlan(req, res, next) {
    try {
      const userId = req.userId;

      const { error, value } = getAnnualPlanSchema.validate(req.query, {
        abortEarly: false,
        convert: true,
      });

      if (error) {
        return next({
          status: 400,
          message: "D·ªØ li·ªáu truy v·∫•n kh√¥ng h·ª£p l·ªá",
          details: error.details.map((e) => e.message),
        });
      }

      const { year } = value;
      const rows = await PlanModel.getAnnualExpensePlan({ userId, year });

      res.json({ success: true, data: rows });
    } catch (err) {
      next(err);
    }
  }
  

  async getTotalAmount(req, res, next) {
    try {
      const userId = req.userId;

      const { error } = getTotalAmountSchema.validate({ userId });
      if (error) {
        return res.status(400).json({
          success: false,
          message: error.details[0].message,
        });
      }

      const [rows] = await TotalModel.getTotalAmount({ userId });

      const totalAmount = rows?.totalAmount ?? 0;

      res.json({
        success: true,
        data: { totalAmount },
      });
    } catch (err) {
      next({ status: 500, message: "L·ªói khi l·∫•y t·ªïng s·ªë d∆∞" });
    }
  }
}

module.exports = new FinanceController();
